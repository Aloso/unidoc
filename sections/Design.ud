Unidoc is still very much in flux. I will add more features, but I might also change existing syntax that will break backwards compatibility. To be able to make good, informed decisions, I value input from the community. I hope that Unidoc will one day have a formalized RFC process, but for now, you can propose new features or changes by filing an [issue].

[issue]: https://github.com/Aloso/unidoc/issues

@NOTOC
#### Table of contents

@TOC{}

## Inline formatting

Currently, `~` is used for strikethrough (whereas GFM uses `~~`), and `#` is used for subscript:

@(.playground)
```
~Strikethrough~ #subscript#
```

However, it might be desirable to _not_ give `#` a special meaning, so it can be used to reference GitHub issues and pull requests, Twitter hashtags, etc. Should we use `~` for subscript and require two tildes for strikethrough?

Note that in prose, the number sign/hashtag is usually used as a prefix, not as a suffix, so it is always left-flanking. It therefore only poses a problem _within subscript text_:

@(.playground)
```
#This #is #not #a #problem.

#Subscript text containing a #hashtag is rendered incorrectly.#
```

## Numbered lists interrupting paragraphs

In Markdown, numbered lists can only interrupt a paragraph if they start with the number 1. On one hand, this is an inconsistency and an edge case that probably very few people know about. On the other hand, it is rarely a problem, therefore we gain little by diverging from the CommonMark spec.

Comparison (the number 4 is used as an example for any non-negative number other than 1):

@COLS(.input ^ ^ ^ ^)
||#x2 Input
|#x2 Expected
|#2  Solution for
|#x2 Likeliness
||#   CommonMark
|#   Unidoc
||   <pre style="margin:0">Text<br>1. Text</pre>
|^  list
|^2 **it works!**
|^  High
||   <pre style="margin:0">Text<br>1. Text</pre>
|^  paragraph
|^2 escape the dot
|^  Very low * †
||   <pre style="margin:0">Text<br>4. Text</pre>
|^  list
|^  insert blank line
|^  **it works!**
|^  Low ‡
||   <pre style="margin:0">Text<br>4. Text</pre>
|^  paragraph
|^  **it works!**
|^  escape the dot
|^  Low *

@BULLET('*  ')
- This is unlikely because there's no reason to add a line break before the number. The line break would more likely be _after_ the number.

@BULLET('†  ')
- This is unlikely because it only applies to the number 1.

@BULLET('‡  ')
- This is unlikely because lists rarely start with a number other than 1.

## Blockquotes and empty lines

Currently, blockquotes can contain a blank line without a blockquote marker:

@(.playground)
```
> Test

> Test
```

This is different than in Markdown, where a blank line terminates a blockquote. This might be unexpected, and an inexperienced writer might not know what to do to fix (the fix is to insert a `$`, or change the indentation of the second quote).

Note that the above behaviour is consistent with numbered lists. However, it might still be good to use Markdown's behaviour to make it more intuitive. Thoughts?

## Macros attaching to inline formatting

It's odd that macros can attach to `inline code`, but not to other types of inline formatting. This is because inline code has a different parsing strategy than other formatting. Specifically, backticks that surround inline code don't need to be left- or right-flanking; for example, this is valid inline code: `` ` text ` `` but this is not a valid emphasis: `* text *`

When a macro appears before a formatting delimiter, the parsing strategy could be changed, but is it worth the added complexity?

Note that this already works: `@MACRO{**bold text**}`. This creates an unnecessary `<span>`, but that can be fixed by changing the behaviour of inline macros with braces that contain only a single element.

## Thematic breaks and underlines

It's unfortunate that a sequence of dashes can be either a thematic break or a heading underline. I would prefer if this ambiguity didn't exist, even though it is easy to resolve.

However, deprecating thematic breaks made of dashes would break a lot of Markdown documents; one current advantage of Unidoc is that many Markdown documents need no or only few changes to become an equivalent Unidoc document. This advantage would be diminished by deprecating `---` thematic breaks. A tool to automatically parse Markdown documents and convert it to Unidoc would help.

## Tables

Unidoc tries to behave the same as CommonMark, unless there's a good reason to break compatibility. One interesting case are tables: Tables aren't part of the CommonMark specification, only the GFM (GitHub-flavored Markdown) specification. However, GFM-style tables are supported in many Markdown implementations. Therefore it would make sense if Unidoc tables were backwards-compatible with GFM-style tables.

I decided against that because I find them inflexible and cumbersome to type. Furthermore, they are only readable when the content fits in a single line, and the line that separates the table header from the body seems out of place when there is no table header. Lastly, GFM-style tables are difficult to parse efficiently.

Is there a better syntax, maybe one that is more similar to GFM-style tables, to not break compatibility entirely?

## AsciiMath

The Rust AsciiMath implementation used by Unidoc behaves slightly different than the official implementation and might also contain a few bugs. Possible solutions:

* Use the [official implementation](https://github.com/asciimath/asciimathml/blob/master/ASCIIMathML.js). This requires that NodeJS is installed on the build machine.

* Don't convert AsciiMath to MathML, and include MathJax with AsciiMath support. Note that the recommended way to use MathJax searches the entire document for text enclosed in `\(`...`\)`, so this is less performant and might also interpret text as Math that isn't supposed to be.

* Improve `asciimath-rs`, or translate the official JavaScript implementation into Rust

## Upcoming features

Here's a list of features I would like to have. They're in no particular order. Items marked as _planned_ will probably be implemented next.

For other items, there's no guarantee that they will be implemented, but you can open an [issue] and explain why you need a particular feature, and I'll work on resolving the issue. The feature doesn't need to be from the below list.

@NOTOC
### Syntax highlighting

@(.status){Plannned}

In Markdown, syntax highlighting is optional (since it can be done via JavaScript in the client). However, in static site generators it is common to perform the syntax highlighting during site generation, to make the pages load faster.

I propose to use [syntect](https://lib.rs/crates/syntect) in Unidoc, which can be enabled universally with a CLI flag or per-document with a macro.

@NOTOC
### CLI

@(.status){Plannned}

Unidoc should have a command-line interface that can do the following things:

* Convert a file and save the result in another file
* Convert all files in a directory and save the results in another directory
* Pass configuration options
* Pass the location of a configuration file
* Specify permissions, i.e. which directories can be accessed within Unidoc files
* Watch for file changes and automatically recompile changed files
* Provide different log levels
* Emit warnings when encountering syntax that most likely doesn't do what was intended (e.g. when a link reference doesn't refer to any definition)
* Provide an option to emit the IR for debugging

@NOTOC
### Replacements

@(.status){Plannned}

The following text replacements should be enabled by default:

* Smart punctuation: `"`, `'`, `--`, `...`
* Arrows: `->`, `=>`, `<-`, `<=`, `<->`, `<=>`
* Symbols: `(C)`, `(TM)`, `(R)`

They can be disabled in the CLI or with a macro.

@NOTOC
### Security protocol

@(.status){Plannned}

There should be two operating modes, "safe mode" and "unsafe mode". In safe mode, when untrusted input is converted to HTML and displayed, the following should apply:

* The environment converting the input to HTML (from now on called the "build environment") can't be altered from within Unidoc; for example, no files in the build environment can't be modified.
* Information from the build environment can't be obtained from within Unidoc, unless explicitly permitted; for example, file access is restricted to an allowlisted set of directories
* The build environment can't be attacked or compromised in any way, including hacking, crypto-mining, sending spam mail, running a Denial-of-Service attack (e.g. by providing input with exponential parsing complexity), communicating with 3rd-party services using the build environment's credentials, performing illegal activity using the build environment, circumventing paywalls or other restrictions (e.g. to access services only available in certain countries), etc.

The safe mode should be the default. Unsafe mode can be enabled in the API, the command line, and nowhere else.

Further restrictions can be put in place, e.g. to forbid embedding iframes or untrusted JavaScripts in the document.

@NOTOC
### Language awareness

@(.status){Plannned}

The language should be configurable both in the CLI and with a macro. The language affects

* The type of smart quotes used
* The `lang` attribute when emitting a complete HTML page

@NOTOC
### Footnotes

@(.status){Plannned}

The syntax I think is most appropriate is this:

```markdown
Absurd claim. [This is some footnote text][^] [Another footnote][^]

-----

Footnotes:

@FOOTNOTES{}
```

Which should be rendered like this:

> Absurd claim. ^<a name="fn-1">[[1]](#1)</a>^ ^<a name="fn-2">[[2]](#2)</a>^
>
> -----
>
> Footnotes:
>
> @('list-style:none inside; padding-left:0.5em')
> * <a name="1">[1.](#fn-1)</a> This is some footnote text
> * <a name="2">[2.](#fn-2)</a> Another footnote

@NOTOC
### Math

Math blocks require MathJax, so there should be a macro or an automatic way to include the MathJax script. However, it should be possible to self-host the script, so nobody has to use a CDN unless they want to.

@NOTOC
### Tables

It's cumbersome to style each table cell individually. There should be a macro to style columns, using a `<colgroup>` HTML tag.

Also, it would be useful from time to time if tables could contain block elements.

@NOTOC
### IDE support

By implementing the _language server protocol_ (LSP), a wide range of code editors can be easily supported. They should offer

* Syntax highlighting
* Show warnings
* Autocompletion for macros
* Auto-close delimiters

The online playground should offer IDE features as well (at least syntax highlighting).

@NOTOC
### Checklists

They look like this in GFM:

```markdown
- [x] Done
- [x] Also done
- [ ] Not yet done
```

@NOTOC
### HTML

* Allow uppercase HTML tags
* Allow numeric HTML entities
* Warn when an element is in an element where it is illegal as of HTML5
* Warn when a block HTML element isn't followed by a line break

@NOTOC
### Links

* Auto-links
* Forbid nested links?
* URLs in angle brackets?

@NOTOC
### Plugins

Plugins could add new macros, text substitutions, URL schemas, HTML tags, change the configuration, read and modify the IR, add document metadata, provide syntax highlighting, provide a file format parser (e.g. to include `*.md` or `*.adoc` files), start a development server, etc. Unidoc could communicate with plugins over stdin/out via JSON.

Plugins probably won't work in the playground, so it might make sense to implement as much as possible in Unidoc directly; this simplifies distribution, as a single executable is sufficient for most purposes.

@NOTOC
### Custom replacements

There could be a way to specify custom text replacements, e.g.:

* Math:
    `!=`, @(title="conflicts with arrow" 'color:#ff6666')`<=`, `>=`, `~=`, `===`, `~~`, `+-`, `-+`, `|->`, `_|_`, `|-`,
    `\AA`, `\EE`, `\N`, `\Z`, `\Q`, `\R`, `\C`, `\H`, `\F`, `\oo` ...
    * [Wikipedia: Glossary of mathematical symbols](https://en.wikipedia.org/wiki/Glossary_of_mathematical_symbols)
    * [AsciiMath](http://asciimath.org)
    * Note that greek letters and many operators can be entered with HTML entities, e.g. `&pi;` = &pi;, `&notin;` = &notin;
* Other, e.g.: `?!`, `!?`

@NOTOC
### Macros

* Include file (`@INCLUDE`)
* Rewrite URLs (`@REWRITE_URLS`)
    * Important when using webpack, jekyll or a similar system where assets move while building the site
    * Convenient if URLs can be abbreviated, e.g. `wiki:en/*` -> `https://en.wikipedia.org/wiki/*`
* Don't wrap text in a paragraph (`@PURE`)
* Open link in new tabl (`@BLANK`)
* Load plugin (`@LOAD`)
* Details that can be opened with summary (`@DETAILS`)
* Image caption (`@CAPTION`)
* Metadata (`@META`)

@NOTOC
### Metadata section

In Liquid, it looks like this:

````
---
author: John Doe
date: 2025-01-01
---
````

A metadata section must be at the very top of the file. This is usually unambiguous, since documents rarely start with a thematic break.

@NOTOC
### Emojis

They could be written like `:makeup:`.

@NOTOC
### Support XML

This would be useful to be able to include `<svg>` elements.

@NOTOC
### Ideas stolen from Asciidoctor

* Admonition blocks (e.g. `@TIP`)
* Sidebar blocks (e.g. `@SIDEBAR`)
* Example blocks (e.g. `@EXAMPLE(title)`)
* Labeled lists (e.g. `Label:: content`), Q&A lists, glossary lists, bibliography lists
