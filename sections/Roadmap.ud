@CONFIG(
  heading_anchor = before
)


Here's a list of features I would like to have. They're in no particular order. Items marked as _planned_ will probably be implemented next.

For other items, there's no guarantee that they will be implemented, but you can open an [issue] and explain why you need a particular feature, and I'll work on resolving the issue. The feature doesn't need to be from the below list.

[issue]: https://github.com/Aloso/unidok/issues

@NOTOC
#### Table of contents

@TOC{}


## Syntax highlighting @NOTOC@NOTXT@(.status){Plannned}

In Markdown, syntax highlighting is optional (since it can be done via JavaScript in the client). However, in static site generators it is common to perform the syntax highlighting during site generation, to make the pages load faster.

I propose to use [syntect](https://lib.rs/crates/syntect) in Unidok, which can be enabled universally with a CLI flag or per-document with a macro.

// ### CLI

// * Pass configuration options
// * Pass the location of a configuration file
// * Specify permissions, i.e. which directories can be accessed within Unidok files
// * Watch for file changes and automatically recompile changed files
// * Emit warnings when encountering syntax that most likely doesn't do what was intended (e.g. when a link reference doesn't refer to any definition)
// * Provide an option to emit the IR for debugging


## Security protocol @NOTOC@NOTXT@(.status){Plannned}

There should be two operating modes, "safe mode" and "unsafe mode". In safe mode, when untrusted input is converted to HTML and displayed, the following should apply:

* The environment converting the input to HTML (from now on called the "build environment") can't be altered from within Unidok; for example, no files in the build environment can't be modified.
* Information from the build environment can't be obtained from within Unidok, unless explicitly permitted; for example, file access is restricted to an allowlisted set of directories
* The build environment can't be attacked or compromised in any way, including hacking, crypto-mining, sending spam mail, running a Denial-of-Service attack (e.g. by providing input with exponential parsing complexity), communicating with 3rd-party services using the build environment's credentials, performing illegal activity using the build environment, circumventing paywalls or other restrictions (e.g. to access services only available in certain countries), etc.

The safe mode should be the default. Unsafe mode can be enabled in the API, the command line, and nowhere else.

Further restrictions can be put in place, e.g. to forbid embedding iframes or untrusted JavaScripts in the document.


## Language awareness @NOTOC@NOTXT@(.status){Plannned}

The language should be configurable both in the CLI and with a macro. The language affects

* The type of smart quotes used
* The `lang` attribute when emitting a complete HTML page


## Math

Allow using a self-hosted MathJax script instead of the one from the CDN.


## More substitutions

In addition to smart punctuation (`'`, `"`, `--`, `...`), the following text substitutions could be added:

* Arrows: `->`, `=>`, `<-`, `<->`, `<=>`
* Symbols: `(C)`, `(TM)`, `(R)`

More opt-in substitutions could be made available via configuration options or plugins, for example:

* Math:
  `!=`, `<=`, `>=`, `~=`, `===`, `~~`, `+-`, `-+`, `|->`, `_|_`, `|-`,
  `\AA`, `\EE`, `\N`, `\Z`, `\Q`, `\R`, `\C`, `\H`, `\F`, `\oo` ...
  * [Wikipedia: Glossary of mathematical symbols](https://en.wikipedia.org/wiki/Glossary_of_mathematical_symbols)
  * [AsciiMath](http://asciimath.org)
  * Note that greek letters and many operators can be entered with HTML entities, e.g. `&pi;` = &pi;, `&notin;` = &notin;
* Other, e.g.: `?!`, `!?`


## Tables

It's cumbersome to style each table cell individually. There should be a macro to style columns, using a `<colgroup>` HTML tag.

Also, it would be useful from time to time if tables could contain block elements.


## IDE support

By implementing the _language server protocol_ (LSP), a wide range of code editors can be easily supported. They should offer

* Syntax highlighting
* Show warnings
* Autocompletion for macros
* Auto-close delimiters

The online playground should offer IDE features as well (at least syntax highlighting).


## Checklists

They look like this in GFM:

```markdown
- [x] Done
- [x] Also done
- [ ] Not yet done
```


## HTML

* Allow uppercase HTML tags
* Allow numeric HTML entities
* Warn when an element is in an element where it is illegal as of HTML5
* Warn when a block HTML element isn't followed by a line break


## Links

* Auto-links
* Forbid nested links?
* URLs in angle brackets?


## Footnote definitions and bibliography

Footnotes look like this:

@(.playground)
```
Absurd claim. [This is some footnote text][^] [Another footnote][^]

@FOOTNOTES{}
```

This looks like a link referring to a link reference, only that the reference is the special token `^`. This could be extended similar to link definitions:

```
Absurd claim. [^foo] [^bar]

@FOOTNOTES{}

[^foo]: This is some footnote text
[^bar]: Another footnote
```

This makes it possible to re-use the same footnote reference in multiple places (but the text is still only included once). Another useful idea are bibliography lists:

```
Absurd claim. [^^foo] [^^bar]

[^^foo]: John Foo. _Absurd Claims_. 2007. ISBN-1234567
[^^bar]: Max Bar. _Even more absurd claims_. 2008. ISBN-2345678

@BIBLIOGRAPHY{}
```


## Plugins

Plugins could add new macros, text substitutions, URL schemas, HTML tags, change the configuration, read and modify the IR, add document metadata, provide syntax highlighting, provide a file format parser (e.g. to include `*.md` or `*.adoc` files), start a development server, etc. Unidok could communicate with plugins over stdin/out via JSON.

Plugins probably won't work in the playground, so it might make sense to implement as much as possible in Unidok directly; this simplifies distribution, as a single executable is sufficient for most purposes.


## More macros

* Include file (`@INCLUDE`)
* Rewrite URLs (`@REWRITE_URLS`)
    * Important when using webpack, jekyll or a similar system where assets move while building the site
    * Convenient if URLs can be abbreviated, e.g. `wiki:en/*` -> `https://en.wikipedia.org/wiki/*`
* Don't wrap text in a paragraph (`@PURE`)
* Load plugin (`@LOAD`)
* Details that can be opened with summary (`@DETAILS`)
* Image caption (`@CAPTION`)
* Metadata (`@META`)


## Metadata section

In Liquid, it looks like this:

````
---
author: John Doe
date: 2025-01-01
---
````

A metadata section must be at the very top of the file. This is usually unambiguous, since documents rarely start with a thematic break.


## Emojis

They could be written like `:makeup:`.


## Support XML

This would be useful to be able to include `<svg>` elements.


## Ideas stolen from Asciidoctor

* Admonition blocks (e.g. `@TIP`)
* Sidebar blocks (e.g. `@SIDEBAR`)
* Example blocks (e.g. `@EXAMPLE(title)`)
* Labeled lists (e.g. `Label:: content`), Q&A lists, glossary lists
