@CONFIG(
  heading_anchor = before
)


Unidok is still very much in flux. I will add more features, but I might also change existing syntax that will break backwards compatibility. To be able to make good, informed decisions, I value input from the community. I hope that Unidok will one day have a formalized RFC process, but for now, you can propose new features or changes by filing an [issue].

[issue]: https://github.com/Aloso/unidok/issues

@NOTOC
#### Table of contents

@TOC{}

## Inline formatting

Currently, `~` is used for strikethrough (whereas GFM uses `~~`), and `#` is used for subscript:

@(.playground)
```
~Strikethrough~ #subscript#
```

However, it might be desirable to _not_ give `#` a special meaning, so it can be used to reference GitHub issues and pull requests, Twitter hashtags, etc. Should we use `~` for subscript and require two tildes for strikethrough?

Note that in prose, the number sign/hashtag is usually used as a prefix, not as a suffix, so it is always left-flanking. It therefore only poses a problem _within subscript text_:

@(.playground)
```
#This #is #not #a #problem.

#Subscript text containing a #hashtag is rendered incorrectly.#
```

## Numbered lists interrupting paragraphs

In Markdown, numbered lists can only interrupt a paragraph if they start with the number 1. On one hand, this is an inconsistency and an edge case that probably very few people know about. On the other hand, it is rarely a problem, therefore we gain little by diverging from the CommonMark spec.

Comparison (the number 4 is used as an example for any non-negative number other than 1):

<div class="wrap-table">
@COLS(.input ^ ^ ^ ^)
||#x2 Input
|#x2 Expected
|#2  Solution for
|#x2 Likeliness
||#   CommonMark
|#   Unidok
||   <pre style="margin:0">Text<br>1. Text</pre>
|^  list
|^2 **it works!**
|^  High
||   <pre style="margin:0">Text<br>1. Text</pre>
|^  paragraph
|^2 escape the dot
|^  Very low * †
||   <pre style="margin:0">Text<br>4. Text</pre>
|^  list
|^  insert blank line
|^  **it works!**
|^  Low ‡
||   <pre style="margin:0">Text<br>4. Text</pre>
|^  paragraph
|^  **it works!**
|^  escape the dot
|^  Low *
</div>

@BULLET('*  ')
- This is unlikely because there's no reason to add a line break before the number. The line break would more likely be _after_ the number.

@BULLET('†  ')
- This is unlikely because it only applies to the number 1.

@BULLET('‡  ')
- This is unlikely because lists rarely start with a number other than 1.

## Blockquotes and empty lines

Currently, blockquotes can contain a blank line without a blockquote marker:

@(.playground)
```
> Test

> Test
```

This is different than in Markdown, where a blank line terminates a blockquote. This might be unexpected, and an inexperienced writer might not know what to do to fix (the fix is to insert a `$`, or change the indentation of the second quote).

Note that the above behaviour is consistent with numbered lists. However, it might still be good to use Markdown's behaviour to make it more intuitive. Thoughts?

## Macros attaching to inline formatting

It's odd that macros can attach to `inline code`, but not to other types of inline formatting. This is because inline code has a different parsing strategy than other formatting. Specifically, backticks that surround inline code don't need to be left- or right-flanking; for example, this is valid inline code: `` ` text ` `` but this is not a valid emphasis: `* text *`

When a macro appears before a formatting delimiter, the parsing strategy could be changed, but is it worth the added complexity?

Note that this already works: `@MACRO{**bold text**}`. This creates an unnecessary `<span>`, but that can be fixed by changing the behaviour of inline macros with braces that contain only a single element.

## Thematic breaks and underlines

It's unfortunate that a sequence of dashes can be either a thematic break or a heading underline. I would prefer if this ambiguity didn't exist, even though it is easy to resolve.

However, deprecating thematic breaks made of dashes would break a lot of Markdown documents; one current advantage of Unidok is that many Markdown documents need no or only few changes to become an equivalent Unidok document. This advantage would be diminished by deprecating `---` thematic breaks. A tool to automatically parse Markdown documents and convert it to Unidok would help.

## Tables

Unidok tries to behave the same as CommonMark, unless there's a good reason to break compatibility. One interesting case are tables: Tables aren't part of the CommonMark specification, only the GFM (GitHub-flavored Markdown) specification. However, GFM-style tables are supported in many Markdown implementations. Therefore it would make sense if Unidok tables were backwards-compatible with GFM-style tables.

I decided against that because I find them inflexible and cumbersome to type. Furthermore, they are only readable when the content fits in a single line, and the line that separates the table header from the body seems out of place when there is no table header. Lastly, GFM-style tables are difficult to parse efficiently.

Is there a better syntax, maybe one that is more similar to GFM-style tables, to not break compatibility entirely?

## AsciiMath

The Rust AsciiMath implementation used by Unidok behaves slightly different than the official implementation and might also contain a few bugs. Possible solutions:

* Use the [official implementation](https://github.com/asciimath/asciimathml/blob/master/ASCIIMathML.js). This requires that NodeJS is installed on the build machine.

* Don't convert AsciiMath to MathML, and include MathJax with AsciiMath support. Note that the recommended way to use MathJax searches the entire document for text enclosed in `\(`...`\)`, so this is less performant and might also interpret text as Math that isn't supposed to be.

* Improve `asciimath-rs`, or translate the official JavaScript implementation into Rust
